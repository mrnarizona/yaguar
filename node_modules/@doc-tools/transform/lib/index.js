"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const chalk_1 = require("chalk");
const markdown_it_attrs_1 = __importDefault(require("markdown-it-attrs"));
const log_1 = require("./log");
const highlight_1 = __importDefault(require("./highlight"));
const title_1 = __importDefault(require("./title"));
const headings_1 = __importDefault(require("./headings"));
const liquid_1 = __importDefault(require("./liquid"));
const sanitize_1 = __importDefault(require("./sanitize"));
const notes_1 = __importDefault(require("./plugins/notes"));
const anchors_1 = __importDefault(require("./plugins/anchors"));
const code_1 = __importDefault(require("./plugins/code"));
const cut_1 = __importDefault(require("./plugins/cut"));
const deflist_1 = __importDefault(require("./plugins/deflist"));
const term_1 = __importDefault(require("./plugins/term"));
const file_1 = __importDefault(require("./plugins/file"));
const imsize_1 = __importDefault(require("./plugins/imsize"));
const meta_1 = __importDefault(require("./plugins/meta"));
const sup_1 = __importDefault(require("./plugins/sup"));
const tabs_1 = __importDefault(require("./plugins/tabs"));
const video_1 = __importDefault(require("./plugins/video"));
const monospace_1 = __importDefault(require("./plugins/monospace"));
const table_1 = __importDefault(require("./plugins/table"));
const md_1 = require("./md");
function transform(originInput, opts = {}) {
    const { vars = {}, path, extractTitle: extractTitleOption, needTitle, allowHTML = false, linkify = false, breaks = true, conditionsInCode = false, needToSanitizeHtml = false, sanitizeOptions, needFlatListHeadings = false, disableLiquid = false, leftDelimiter = '{', rightDelimiter = '}', isLiquided = false, plugins = [
        meta_1.default,
        deflist_1.default,
        cut_1.default,
        notes_1.default,
        anchors_1.default,
        tabs_1.default,
        code_1.default,
        sup_1.default,
        video_1.default,
        monospace_1.default,
        table_1.default,
        file_1.default,
        imsize_1.default,
        term_1.default,
    ], highlightLangs = {} } = opts, customOptions = __rest(opts, ["vars", "path", "extractTitle", "needTitle", "allowHTML", "linkify", "breaks", "conditionsInCode", "needToSanitizeHtml", "sanitizeOptions", "needFlatListHeadings", "disableLiquid", "leftDelimiter", "rightDelimiter", "isLiquided", "plugins", "highlightLangs"]);
    const pluginOptions = Object.assign(Object.assign({}, customOptions), { vars,
        path, extractTitle: extractTitleOption, disableLiquid,
        log: log_1.log });
    const input = disableLiquid || isLiquided
        ? originInput
        : (0, liquid_1.default)(originInput, vars, path, { conditionsInCode });
    const highlight = (0, highlight_1.default)(highlightLangs);
    const md = (0, md_1.initMd)({ html: allowHTML, linkify, highlight, breaks });
    // Need for ids of headers
    md.use(markdown_it_attrs_1.default, { leftDelimiter, rightDelimiter });
    plugins.forEach((plugin) => md.use(plugin, pluginOptions));
    try {
        let title;
        let tokens;
        let titleTokens;
        const env = {};
        tokens = md.parse(input, env);
        if (extractTitleOption) {
            ({ title, tokens, titleTokens } = (0, title_1.default)(tokens));
            // title tokens include other tokens that need to be transformed
            if (titleTokens.length > 1) {
                title = md.renderer.render(titleTokens, md.options, env);
            }
        }
        if (needTitle) {
            ({ title } = (0, title_1.default)(tokens));
        }
        const headings = (0, headings_1.default)(tokens, needFlatListHeadings);
        // add all term template tokens to the end of the html
        const termTokens = env.termTokens || [];
        let html = md.renderer.render([...tokens, ...termTokens], md.options, env);
        if (needToSanitizeHtml) {
            html = (0, sanitize_1.default)(html, sanitizeOptions);
        }
        const assets = md.assets;
        const meta = md.meta;
        return {
            result: { html, title, headings, assets, meta },
            logs: log_1.log.get(),
        };
    }
    catch (err) {
        log_1.log.error(`Error occurred${path ? ` in ${(0, chalk_1.bold)(path)}` : ''}`);
        throw err;
    }
}
module.exports = transform;
//# sourceMappingURL=index.js.map