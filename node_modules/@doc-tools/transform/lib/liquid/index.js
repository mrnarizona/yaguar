"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const substitutions_1 = __importDefault(require("./substitutions"));
const sourceMap_1 = require("./sourceMap");
const cycles_1 = __importDefault(require("./cycles"));
const conditions_1 = __importDefault(require("./conditions"));
const argv_1 = __importDefault(require("./services/argv"));
const codes = [];
const regexp = /`{3}(((?!`{3})[^])+)`{3}/g;
function saveCode(str, vars, path, substitutions) {
    let i = 0;
    return str.replace(regexp, (_, code) => {
        i++;
        const codeWithVars = substitutions ? (0, substitutions_1.default)(code, vars, path) : code;
        codes.push(codeWithVars);
        /* Keep the same count of lines to avoid transformation of the source map */
        const codeLines = codeWithVars.split('\n');
        const emptyLines = codeLines.length > 1 ? codeLines.reduce((acc) => acc + '\n', '') : '';
        return '```' + i + emptyLines + '```';
    });
}
function repairCode(str) {
    return str.replace(regexp, (_, code) => {
        const number = code.trimRight();
        return '```' + codes[number - 1] + '```';
    });
}
function liquid(originInput, vars, path, settings) {
    const { cycles = true, conditions = true, substitutions = true, conditionsInCode = false, keepNotVar = false, withSourceMap, } = settings || {};
    argv_1.default.init({
        cycles,
        conditions,
        substitutions,
        conditionsInCode,
        keepNotVar,
        withSourceMap,
    });
    let output = conditionsInCode ? originInput : saveCode(originInput, vars, path, substitutions);
    let sourceMap = {};
    if (withSourceMap) {
        const lines = output.split('\n');
        sourceMap = lines.reduce((acc, _cur, index) => {
            acc[index + 1] = index + 1;
            return acc;
        }, {});
    }
    if (cycles) {
        output = (0, cycles_1.default)(output, vars, path, { sourceMap });
    }
    if (conditions) {
        output = (0, conditions_1.default)(output, vars, path, { sourceMap });
    }
    if (substitutions) {
        output = (0, substitutions_1.default)(output, vars, path);
    }
    output = conditionsInCode ? output : repairCode(output);
    codes.length = 0;
    if (withSourceMap) {
        return {
            output,
            sourceMap: (0, sourceMap_1.prepareSourceMap)(sourceMap),
        };
    }
    return output;
}
// 'export default' instead of 'export = ' because of circular dependency with './cycles.ts'.
// somehow it breaks import in './cycles.ts' and imports nothing
exports.default = liquid;
//# sourceMappingURL=index.js.map