"use strict";
const path_1 = require("path");
const chalk_1 = require("chalk");
const utilsFS_1 = require("../../utilsFS");
const includesPaths = [];
const collect = (input, options) => {
    const { root, path, destPath = '', log, copyFile, singlePage } = options;
    const INCLUDE_REGEXP = /{%\s*include\s*(notitle)?\s*\[(.+?)]\((.+?)\)\s*%}/g;
    let match, result = input;
    while ((match = INCLUDE_REGEXP.exec(result)) !== null) {
        let [, , , relativePath] = match;
        const [matchedInclude] = match;
        relativePath = relativePath.split('#')[0];
        const includePath = (0, utilsFS_1.resolveRelativePath)(path, relativePath);
        const targetDestPath = (0, utilsFS_1.resolveRelativePath)(destPath, relativePath);
        if (includesPaths.includes(includePath)) {
            log.error(`Circular includes: ${(0, chalk_1.bold)(includesPaths.concat(path).join(' â–¶ '))}`);
            break;
        }
        if (singlePage && !includesPaths.length) {
            const newRelativePath = (0, path_1.relative)(root, includePath);
            const newInclude = matchedInclude.replace(relativePath, newRelativePath);
            result = result.replace(matchedInclude, newInclude);
            const delta = matchedInclude.length - newInclude.length;
            INCLUDE_REGEXP.lastIndex = INCLUDE_REGEXP.lastIndex - delta;
        }
        includesPaths.push(includePath);
        const includeOptions = Object.assign(Object.assign({}, options), { path: includePath, destPath: targetDestPath });
        try {
            copyFile(includePath, targetDestPath, includeOptions);
        }
        catch (e) {
            log.error(`No such file or has no access to ${(0, chalk_1.bold)(includePath)} in ${(0, chalk_1.bold)(path)}`);
        }
        finally {
            includesPaths.pop();
        }
    }
    if (singlePage) {
        return result;
    }
    return null;
};
module.exports = collect;
//# sourceMappingURL=collect.js.map